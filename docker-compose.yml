version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: medivision_postgres
    environment:
      POSTGRES_DB: medivision
      POSTGRES_USER: mediadmin
      POSTGRES_PASSWORD: secure_password_2025
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - medivision_network

  # Redis for Celery and Caching
  redis:
    image: redis:7-alpine
    container_name: medivision_redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - medivision_network

  # MinIO for DICOM File Storage
  minio:
    image: minio/minio:latest
    container_name: medivision_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - medivision_network

  # Development FastAPI Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: medivision_api
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - ./models:/app/models
    environment:
      DATABASE_URL: postgresql://mediadmin:secure_password_2025@postgres:5432/medivision
      REDIS_URL: redis://redis:6379/0
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      ENVIRONMENT: development
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - medivision_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: medivision_celery
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - ./models:/app/models
    environment:
      DATABASE_URL: postgresql://mediadmin:secure_password_2025@postgres:5432/medivision
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - medivision_network
    command: sh -c "sleep 5 && celery -A app.celery worker --loglevel=info"

  # Celery Flower for Task Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: medivision_flower
    ports:
      - "5555:5555"
    volumes:
      - ./backend:/app
    environment:
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      - redis
      - celery_worker
    networks:
      - medivision_network
    command: sh -c "sleep 15 && celery -A app.celery flower --port=5555 --broker=redis://redis:6379/0 --basic_auth=admin:admin123"

  # Adminer for Database Management
  adminer:
    image: adminer:latest
    container_name: medivision_adminer
    ports:
      - "8080:8080"
    networks:
      - medivision_network

  # Nginx for Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: medivision_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - medivision_network

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  medivision_network:
    driver: bridge
